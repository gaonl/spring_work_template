<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- 开启组件自动扫描 -->
    <context:component-scan base-package="com.magicli.aop,com.magicli.ioc,com.magicli.beans,"/>

    <!-- 导入属性文件，并且在bean中可以使用${properties}来获取参数   -->
    <!-- (默认有生成PropertySourcesPlaceholderConfigurer这个Bean了吧)   -->
    <context:property-placeholder location="classpath:application.properties"/>

    <!-- 引入xml类型的配置文件   -->
    <import resource="application-datasource.xml"/>

    <!-- 引入java类型的配置文件   -->
    <!--<bean class="com.magicli.ApplicationContextConfig"></bean>-->


    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
        <constructor-arg name="dataSource" ref="dataSource"></constructor-arg>
    </bean>

    <!-- 用ApplicationContext只要配置了这些bean容器就会自动处理接口相应的功能，而使用BeanFactory则需要手动在beanFactory.addBeanPostProcesser()来注册   -->
    <bean id="liveCycleBean" class="com.magicli.beans.LiveCycleBean" init-method="myInit" destroy-method="myDestroy"/>
    <bean id="allBeanPostProcesser" class="com.magicli.beans.AllBeanPostProcesser"/>

    <!-- xml方式配置aop   -->
    <bean id="daoInvokerCounter" class="com.magicli.aop.DaoInvokeCounter"></bean>
    <aop:config>
        <aop:pointcut id="savePointCut" expression="execution(* com.magicli..UserDao.save(..)))"></aop:pointcut>
        <aop:aspect ref="daoInvokerCounter">
            <aop:before method="before" pointcut-ref="savePointCut"/>
        </aop:aspect>
        <aop:aspect ref="daoInvokerCounter">
            <aop:after method="after" pointcut-ref="savePointCut"/>
        </aop:aspect>
        <aop:aspect ref="daoInvokerCounter">
            <aop:after-returning method="afterReturn" pointcut-ref="savePointCut" returning="result"/>
        </aop:aspect>
        <aop:aspect ref="daoInvokerCounter">
            <aop:after-throwing method="afterThrowing" pointcut-ref="savePointCut" throwing="e"/>
        </aop:aspect>
        <aop:aspect ref="daoInvokerCounter">
            <aop:around method="around" pointcut-ref="savePointCut"/>
        </aop:aspect>
    </aop:config>
    <!-- 配置使@AspectJ自动成为切面代理。注解形式配置切面，启用aop自动生成代理   -->
    <!-- proxy-target-class="false" : jdk动态代理  -->
    <!-- proxy-target-class="true" : cglib代理  -->
    <!-- AnnotationAwareAspectJAutoProxyCreator其实就是配置了这个自动创建代理的bean  -->
    <!--<aop:aspectj-autoproxy proxy-target-class="false"/>-->

    <!-- 管理事务的类-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--<tx:advice id="txAdvice" transaction-manager="transactionManager">-->
        <!--&lt;!&ndash; 配置这个事务建议的属性 &ndash;&gt;-->
        <!--<tx:attributes>-->
            <!--<tx:method name="get*" read-only="true"/>-->
            <!--<tx:method name="*"/>-->
        <!--</tx:attributes>-->
    <!--</tx:advice>-->

    <!--<aop:config>-->
        <!--<aop:pointcut id="serviceTransaction" expression="execution(* com.magicli.ioc.service..*(..))"/>-->
        <!--<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceTransaction"/>-->
    <!--</aop:config>-->

    <!-- 直接用注解来声明事务，注解尽量打在实现类上面 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>
</beans>